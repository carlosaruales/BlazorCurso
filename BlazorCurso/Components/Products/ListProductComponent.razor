@using Entities
@using Business

@inject B_Category bCategory

<select class='form-control' @onchange="categoryChanged">
    <option>Seleccione una categoria...</option>
    @foreach (var category in categories)
    {
        <option value="@category.CategoryId">@category.CategoryName</option>
    }
</select>

<br />

<select class="form-control">
    <option>
        Seleccione una categoria...
    </option>
    @foreach (var item in categories)
    {
        <option value="@item.CategoryId" @onchange="OnCategoyChanges">@item.CategoryName</option>
    }
    </select>
<table class="table table-hover table-bordered">
    <thead>
        <tr>
            <th>Referencia</th>
            <th>Nombre producto</th>
            <th>Descripción del producto</th>
            <th>Categoria</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in products)
        {
            <tr>
                <td>@item.ProductId</td>
                <td>@item.ProductName</td>
                <td>@item.ProductDescription</td>
                <td>@item.CategoryId</td>
            </tr>
        }
    </tbody>
</table>

@code {
    string categorySelected;
    List<CategoryEntity> categories = new List<CategoryEntity>();
    IEnumerable<ProductEntity> products = new List<ProductEntity>();
    IEnumerable<ProductEntity> productsTmp;

    protected override async Task OnInitializedAsync()
    {
        categories = bCategory.ItemList();
        products = new B_Product().ItemList();
        productsTmp = products;
    }

    private void categoryChanged(ChangeEventArgs eventArgs)
    {
        products = productsTmp.Where(product => product.CategoryId == eventArgs.Value.ToString());
    }
}
